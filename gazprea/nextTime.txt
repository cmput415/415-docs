Should multi-step implicit promotion be allowed?
  - e.g. `[2.4, 3.6] * 5`
Define or disallow scalar to Matrix promotion with Matrix Multiplication operator (**)
  - e.g. `[[1,2],[3,4],[5,6]] ** 2`
Two-sided promotion allowed?
  - e.g. `1 + 1..10` = `[1 1 1] + [1 2 3]`?
How should string concatenation with a character work?
  - e.g. `"abcd" || 'e'`
  - Disallowed, clarify that `||` only works between `string` and `character[*]`
  - As an append, resulting in `"abcde"`
  - As a splat and concatenate, resulting in `"abcdeeee"`
Should we allow casting of `null` and `identity`?
  - e.g. `as<real>(null)`
Should we change to type and other symbols in a shared scope tree or remain with non-conflicting resolution paths.
  - e.g.
    ```
      typedef integer a;
      const integer a = 0; // Redefinition of symbol `a` or legal?
    ```
How should we refer to functions and procedures collectively when something applies to both?
  - Routine
  - Subroutine

How should we approach rewinding whitespace?
  - Don't.
  - Limit buffer.
  - Run-length encoding.

Reporting errors for size mismatches, compile vs runtime.
e.g. `integer[1 + 2] vec = 1..10;`
Quick fix implemented:
"We've decided to simplify this portion of the specification. There will be no expressions in a size declaration. 
The only two valid tokens in a size declaration are * and a literal integer. If the size is a literal integer AND 
the variable is initialized with 1) a literal vector or a matrix whose size is a literal in the specified dimension,
 or 2) an interval whose bounds are literals, you should perform compile time size checking."

Should tuples be mutable?
```
tuple(integer, integer) x = (1, 6);
x.1 = 8;  // is this valid?
x.2 <- std_input // is this valid?
```
```
// valid:
tuple(integer, integer) tup = (1, 2);
tup = (3, tup.2); // Like changing tup.1 = 3
```

Allow intervals to be printed?
Intervals can't be printed. You would need to print it like this:  `1..3 by 1 ->std_output`

Allow tuple printing?

Tuple assignment, field renaming. This should be the expected behavior?
e.g.
```
tuple(real a, real b) foo = (1, 2);
tuple(real c, real d) bar = (3, 4);

var baz = foo;
baz.a -> std_output; // 1
baz.b -> std_output; // 2

baz = bar;
baz.a -> std_output; // 3
baz.b -> std_output; // 4
```


The following code isn't legal
`boolean x = not null;`
In particular, unary operators on the polymorphic constants can't
determine their type without visiting multiple levels of the tree and eventually revisiting to determine the final value
`float x = - + - + - + identity;`


Function and variable with the same name.
```
procedure f(integer a) returns integer {...}
procedure main() return integer { 
    integer f = 0;
    call f(f);
    return 0;
}
```
Should `call f(f);` be resolved to call function f with argument integer f? Or should an error be raised: attempt to call an integer?


Change the `reverse` built-in function to accept/return a string instead of a character vector?
```
string s = "hi";
string rs = reverse(s);
```
equivalent to
```
string s = "hi";
string rs = as<string>(reverse(as<character[2]>(s)));
```
but
```
string s = "hi";
reverse(s) -> std_output;
```
produces (at the moment) `['i', 'h']`


Behavior of break statements in iterator loops with multiple domains
```
loop i in u, j in v{
    break;
}
// is equivalent to
loop i in u {
  loop j in v {
    break;
  }
}
```


If passing by reference, types must match?
```
procedure p(var real a) {
    a = 2.5;
}
/* called in main */
integer i = 3;
call p(i); // error, differing types?
```


Operations on characters
`character x = ('x');` is invalid because characters have no defined operations.
is `character[2] y = (['x', 'y']);` valid? 
This is inconvenient because many students implemented characters as a part of expressions. Then (expr) != expr


Indexing on intervals is not allowed, but one could cast the interval to a vector before indexing.
Couldn't the interval also be promoted to a vector automatically?
```
integer interval x = 1..3;
integer a = x[2]; // Illegal
```

